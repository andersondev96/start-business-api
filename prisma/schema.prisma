generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    avatar    String?

    userToken UserToken[]
    Company   Company[]

    @@map("users")
}

model UserToken {
    id            String   @id @default(uuid())
    expires_date  DateTime
    refresh_token String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user_id       String
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("userTokens")
}

model Company {
    id                    String         @id @default(uuid())
    name                  String         @unique
    cnpj                  String
    category              String
    description           String?
    services              String[]
    physical_localization Boolean
    user_id               String
    user                  User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Service               Service[]
    contact               Contact        @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    contact_id            String         @unique
    Schedule              Schedule[]
    Address               Address?
    ImageCompany          ImageCompany[]

    @@map("companies")
}

model Contact {
    id        String   @id @default(uuid())
    telephone String
    whatsapp  String?
    email     String
    website   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company?

    @@map("contacts")
}

model Schedule {
    id           String   @id @default(uuid())
    day_of_week  String
    opening_time String
    closing_time String
    lunch_time   String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    company      Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id   String

    @@map("schedules")
}

model Address {
    id         String  @id @default(uuid())
    cep        String
    street     String
    district   String
    number     Int
    state      String
    city       String
    company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("addresses")
}

model ImageCompany {
    id         String   @id @default(uuid())
    title      String?
    image_name String
    image_url  String
    company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("images_company")
}

model Service {
    id                String   @id @default(uuid())
    name              String
    description       String
    price             Float
    category          String
    image_url         String?
    highlight_service Boolean? @default(false)
    favorites         Int?     @default(0)
    starts            Int?     @default(0)
    assessments       Int?     @default(0)
    company_id        String
    company           Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@map("services")
}
