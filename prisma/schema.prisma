generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    avatar    String?

    userToken UserToken[]
    Company   Company[]

    @@map("users")
}

model UserToken {
    id            String   @id @default(uuid())
    expires_date  DateTime
    refresh_token String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user_id       String
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("userTokens")
}

model Company {
    id                       String                    @id @default(uuid())
    name                     String
    cnpj                     String
    category                 String
    description              String?
    physical_localization    Boolean
    user_id                  String
    user                     User                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Service                  Service[]
    contact                  Contact                   @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    contact_id               String                    @unique
    Schedule                 Schedule[]
    ServicesOfferedOnCompany ServiceOfferedOnCompany[]

    @@map("companies")
}

model Contact {
    id        String   @id @default(uuid())
    telephone String
    whatsapp  String?
    email     String
    website   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company?

    @@map("contacts")
}

model Schedule {
    id           String   @id @default(uuid())
    day_of_week  String
    opening_time String
    closing_time String
    company_id   String
    company      Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("schedules")
}

model ServiceOffered {
    id                      String                    @id @default(uuid())
    description             String                    @unique
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    ServiceOfferedOnCompany ServiceOfferedOnCompany[]

    @@map("ServicesOffered")
}

model ServiceOfferedOnCompany {
    company            Company        @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id         String
    serviceOffered     ServiceOffered @relation(fields: [service_offered_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    service_offered_id String
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt

    @@id([company_id, service_offered_id])
    @@map("ServicesOfferedonCompany")
}

model Service {
    id                String   @id @default(uuid())
    name              String
    description       String
    price             Float
    category          String
    image_url         String
    highlight_service Boolean
    favorites         Int      @default(0)
    starts            Int      @default(0)
    assessments       Int      @default(0)
    company_id        String
    company           Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@map("services")
}
