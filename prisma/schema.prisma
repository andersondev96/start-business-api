generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    avatar    String?

    userToken    UserToken[]
    Company      Company?
    Customer Customer?
    Entrepreneur Entrepreneur[]
    Assessment Assessment[]

    @@map("users")
}

model Entrepreneur {
    id         String   @id @default(uuid())
    user_id    String   @unique
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id String?  @unique
    company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())

    @@map("entrepreneurs")
}

model UserToken {
    id            String   @id @default(uuid())
    expires_date  DateTime
    refresh_token String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user_id       String
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("userTokens")
}

model Company {
    id                    String         @id @default(uuid())
    name                  String         @unique
    cnpj                  String
    category              String
    description           String?
    services              String[]
    physical_localization Boolean
    stars Int? @default(0)
    user_id               String         @unique
    user                  User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Service               Service[]
    contact               Contact        @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    contact_id            String         @unique
    Schedule              Schedule[]
    Address               Address?
    ImageCompany          ImageCompany[]
    Entrepreneur          Entrepreneur[]
    proposals Proposal[]
    budgets Budget[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("companies")
}

model Assessment {
  id String @id @default(uuid())
  user_id String
  table_id String
  comment String
  stars Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@map("assessments")
}

model Contact {
    id        String   @id @default(uuid())
    telephone String
    whatsapp  String?
    email     String
    website   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company?

    @@map("contacts")
}

model Schedule {
    id           String   @id @default(uuid())
    weekday       String
    opening_time String
    closing_time String
    lunch_time   String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    company      Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id   String

    @@map("schedules")
}

model Address {
    id         String  @id @default(uuid())
    cep        String
    street     String
    district   String
    number     Int
    state      String
    city       String
    company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("addresses")
}

model ImageCompany {
    id         String   @id @default(uuid())
    title      String?
    image_name String
    image_url  String
    company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    company_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("images_company")
}

model Service {
    id                String   @id @default(uuid())
    name              String
    description       String
    price             Float
    category          String
    image_url         String?
    highlight_service Boolean? @default(false)
    favorites         Int?     @default(0)
    stars             Int?     @default(0)
    assessments       Int?     @default(0)
    company_id        String
    company           Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    service_proposal Service_Proposal[]
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@map("services")
}

model Proposal {
  id String @id @default(uuid())
  objective String
  time DateTime
  description String?
  customer_id String 
  company_id String
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budget Budget?
  service_proposal_customer Service_Proposal[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

@@map("proposals")
}

model Budget {
  id String @id @default(uuid())
  customer_id String
  company_id String
  proposal_id String @unique
  description String
  files String?
  delivery_date DateTime
  amount Decimal
  installments Int 
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  proposal Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budgets")
}

model Customer {
  id String @id @default(uuid())
  user_id String @unique
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  telephone String?
  status String?
  proposal Proposal[]
  budget Budget[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Service_Proposal {
  id String @id @default(uuid())
  service_id String
  proposal_id String
  customer_id String
  service Service @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  proposal Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("services_proposals")
}